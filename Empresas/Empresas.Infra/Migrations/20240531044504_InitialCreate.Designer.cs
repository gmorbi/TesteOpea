// <auto-generated />
using System;
using Empresas.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Empresas.Infra.Migrations
{
    [DbContext(typeof(EmpresaContext))]
    [Migration("20240531044504_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Empresas.Domain.Entities.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("Varchar(200)")
                        .HasColumnName("NOME");

                    b.Property<string>("Porte")
                        .IsRequired()
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("PORTE");

                    b.HasKey("Id");

                    b.ToTable("EMPRESAS", (string)null);
                });

            modelBuilder.Entity("Empresas.Domain.Entities.OAuth.OAuthApiScopes", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DISPLAY_NAME");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("API_SCOPES", (string)null);
                });

            modelBuilder.Entity("Empresas.Domain.Entities.OAuth.OAuthClientGrantTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("CLIENT_ID");

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("GRANT_TYPE");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("CLIENT_GRANT_TYPES", (string)null);
                });

            modelBuilder.Entity("Empresas.Domain.Entities.OAuth.OAuthClientScopes", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("CLIENT_ID");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("SCOPE_ID");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ScopeId");

                    b.ToTable("CLIENT_SCOPES", (string)null);
                });

            modelBuilder.Entity("Empresas.Domain.Entities.OAuth.OAuthClientSecrets", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("CLIENT_ID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("DATE")
                        .HasColumnName("CREATED");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("DATE")
                        .HasColumnName("EXPIRATION");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TYPE");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("VALUE");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("CLIENT_SECRETS", (string)null);
                });

            modelBuilder.Entity("Empresas.Domain.Entities.OAuth.OAuthClients", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("ID");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CLIENT_ID");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("CLIENT_NAME");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("DATE")
                        .HasColumnName("CREATED");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLED");

                    b.Property<long>("IdentityTokenLifetime")
                        .HasColumnType("NUMBER(12)")
                        .HasColumnName("IDENTITY_TOKEN_LIFETIME");

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PROTOCOL_TYPE");

                    b.Property<bool?>("RequireClientSecret")
                        .HasColumnType("bit")
                        .HasColumnName("REQUIRE_CLIENT_SECRET");

                    b.HasKey("Id");

                    b.ToTable("CLIENTS", (string)null);
                });

            modelBuilder.Entity("Empresas.Domain.Entities.OAuth.OAuthClientGrantTypes", b =>
                {
                    b.HasOne("Empresas.Domain.Entities.OAuth.OAuthClients", "Client")
                        .WithMany("OAuthClientGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Empresas.Domain.Entities.OAuth.OAuthClientScopes", b =>
                {
                    b.HasOne("Empresas.Domain.Entities.OAuth.OAuthClients", "Client")
                        .WithMany("OAuthClientScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Empresas.Domain.Entities.OAuth.OAuthApiScopes", "Scope")
                        .WithMany("OAuthClientScopes")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Empresas.Domain.Entities.OAuth.OAuthClientSecrets", b =>
                {
                    b.HasOne("Empresas.Domain.Entities.OAuth.OAuthClients", "Client")
                        .WithMany("OAuthClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("SYS_C00152414");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Empresas.Domain.Entities.OAuth.OAuthApiScopes", b =>
                {
                    b.Navigation("OAuthClientScopes");
                });

            modelBuilder.Entity("Empresas.Domain.Entities.OAuth.OAuthClients", b =>
                {
                    b.Navigation("OAuthClientGrantTypes");

                    b.Navigation("OAuthClientScopes");

                    b.Navigation("OAuthClientSecrets");
                });
#pragma warning restore 612, 618
        }
    }
}
